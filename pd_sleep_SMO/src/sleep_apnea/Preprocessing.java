/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sleep_apnea;

import static sleep_apnea.MainFrame.datasetNameWithoutExtension;
import static sleep_apnea.MainFrame.metadata;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author SEABIRDS-PC
 */
public class Preprocessing extends javax.swing.JFrame {

    /**
     * Creates new form Preprocessing
     */
    
    DecimalFormat df=new DecimalFormat("#.#");
    public static String normalizedData,newDatasetName;
    public static int classAttributeId;
    
    public Preprocessing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 51));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Preprocessing");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(313, 313, 313))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Preprocessing");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Feature Extraction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
            /*  Algorithm 2: Preprocessing */
        
        String dataset=MainFrame.dataset;
            
         /* 1) Remove Duplication */
          
        String newDataset="";
        try
        {
            String sp[]=dataset.trim().split("\n");        
            ArrayList norep=new ArrayList();
            String ro="";
            for(int i=0;i<sp.length;i++)
            {
                String data=sp[i].trim();
                if(!(norep.contains(data.trim())))
                {
                    ro=ro+data.trim()+"\n";
                    norep.add(data.trim());
                }
            }
            newDataset=ro.substring(0,ro.lastIndexOf('\n'));
            JOptionPane.showMessageDialog(this, "Duplicate records are removed successfully!");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
                
            /* 2) Data Imputation */
        
        String newnewDataset="";
        try
        {
            String sp[]=newDataset.trim().split("\n");            
            String sk[]=sp[0].trim().split(",");
            classAttributeId=sk.length-1;
            ArrayList allImputedValues=new ArrayList();        
            for(int j=0;j<sk.length-1;j++)
            {
                double summationOfXi=0;
                for(int i=1;i<sp.length;i++)
                {
                    String sk1[]=sp[i].trim().split(",");
                    if(!(sk1[j].trim().equals("?")))
                    {
                        double Xi=Double.parseDouble(sk1[j].trim());
                        summationOfXi=summationOfXi+Xi;                        
                    }
                }                            
                double mean=(double)(summationOfXi/(double)(sp.length-1));                           
                allImputedValues.add(df.format(mean));            
            }
            
            String ro=sp[0].trim()+"\n";
            for(int i=1;i<sp.length;i++)
            {
                String sk1[]=sp[i].trim().split(",");
                String co="";
                for(int j=0;j<sk1.length;j++)
                {
                    if(sk1[j].trim().equals("?"))
                    {
                        String imputedValue=allImputedValues.get(j).toString().trim();
                        co=co+imputedValue.trim()+",";
                    }
                    else
                    {
                        co=co+sk1[j].trim()+",";
                    }
                }
                String col=co.substring(0,co.lastIndexOf(','));
                ro=ro+col.trim()+"\n";
            }
            newnewDataset=ro.substring(0,ro.lastIndexOf('\n'));
            JOptionPane.showMessageDialog(this, "Missing data imputed successfully!");                        
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }        
            
            /* 3) Data Normalization */
        
        try
        {
            String sp[]=newnewDataset.trim().split("\n");
        
            String spk[]=sp[0].trim().split(",");
            int noOfFeatures=spk.length;

            ArrayList normalized=new ArrayList();
            for(int j=0;j<noOfFeatures;j++)
            {
                if(j!=noOfFeatures-1)
                {
                    double min=0,max=0;

                    for(int i=1;i<sp.length;i++)
                    {
                        String s[]=sp[i].trim().split(",");

                        double value = Double.parseDouble(s[j].trim());

                        if(i==1)
                        {
                            min=value;
                            max=value;
                        }

                        if(value<min)
                        {
                            min=value;
                        }
                        if(value>max)
                        {
                            max=value;
                        }
                    }

                    String coldat="";
                    for(int i=1;i<sp.length;i++)
                    {
                        String s[]=sp[i].trim().split(",");                
                        double value = Double.parseDouble(s[j].trim());

                        double normalization=0;
                        if(min==max)
                        {
                            normalization=Math.random();  
                        }
                        else
                        {
                            normalization=(value-min)/(max-min);  // Formula Link: https://stats.stackexchange.com/questions/70801/how-to-normalize-data-to-0-1-range                  
                        }
                        coldat=coldat+df.format(normalization)+",";
                    }
                    String columndata=coldat.substring(0,coldat.lastIndexOf(','));
                    normalized.add(columndata);
                }
                else
                {
                    String coldat="";
                    for(int i=1;i<sp.length;i++)
                    {
                        String s[]=sp[i].trim().split(",");                                                        
                        coldat=coldat+s[j].trim()+",";
                    }
                    String columndata=coldat.substring(0,coldat.lastIndexOf(','));
                    normalized.add(columndata);
                }
            }
            String val[]=normalized.get(0).toString().trim().split(",");

            String normalizedDat="";
            for(int j=0;j<val.length;j++)
            {
                String dat="";
                for(int i=0;i<normalized.size();i++)
                {
                    String val1[]=normalized.get(i).toString().trim().split(",");
                    dat=dat+val1[j].trim()+",";
                }
                String data=dat.substring(0,dat.lastIndexOf(','));
                normalizedDat=normalizedDat+data.trim()+"\n";
            }
            String dataafternormalization=normalizedDat.substring(0,normalizedDat.lastIndexOf('\n'));
            normalizedData=sp[0].trim()+"\n"+dataafternormalization;                                    
            
            newDatasetName=datasetNameWithoutExtension.trim()+".arff";
            String datasetinarffformat=metadata.trim()+"\n"+dataafternormalization.trim();                
            filewrite(newDatasetName,datasetinarffformat);
            
            JOptionPane.showMessageDialog(this, "Data normalized successfully!");            
            jTextArea1.setText(normalizedData);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }                
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        FeatureExtraction cf=new FeatureExtraction();
        cf.setTitle("Feature Extraction");
        cf.setVisible(true);
        cf.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Preprocessing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public static void filewrite(String filename, String fileContent) {
        try
        {
            String fname=filename.trim();
            File fe=new File(fname);
            String sg=fileContent.trim();
            FileOutputStream fos=new FileOutputStream(fe);
            fos.write(sg.getBytes());
            fos.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}
